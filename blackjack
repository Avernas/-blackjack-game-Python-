# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
pos = [70,150]
in_play = False
outcome = ""
out= ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand=[] 
        # return a string representation of a hand
    def __str__(self):
            ans="Hand contains"
            for i in self.hand:
                ans=ans +" "+ str(i)
            return ans
    def add_card(self, Card):
        self.hand.append(Card)	

    def get_value(self):         
        card_value=[]
        for i in self.hand: 
            card_value.append(VALUES[i.get_rank()])       
        hand_value=sum(card_value)
        if (1 in card_value)==False:
            return hand_value
        if (1 in card_value)==True:
            if hand_value+10<=21:
                return hand_value + 10
            else:
                return hand_value
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
            # compute the value of the hand, see Blackjack video
   
    def draw(self, canvas, pos):
        for i in self.hand:
            i.draw(canvas,pos)       
            pos[0]+= 100 # need updates
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck=[]
        for jj in SUITS:
            for ii in RANKS:
                 self.deck.append(Card(jj,ii))# create a Deck object
        
    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)    # use random.shuffle()
    
    def deal_card(self):
        self.carddeal =  random.choice(self.deck)
        self.deck.remove(self.carddeal)
        # deal a card object from the deck
        return self.carddeal
    def __str__(self):
        ans="Deck contains"
        for element in self.deck:
            ans+= " "+str(element)
        return ans	# return a string representing the deck



#define event handlers for buttons
def deal():
    global outcome, in_play,game_Deck,dealer_hand,player_hand,score
    if in_play:
        score-=1
    game_Deck=Deck()
    game_Deck.shuffle()
    dealer_hand = Hand()
    player_hand = Hand()
    dealcard1=game_Deck.deal_card()
    dealcard2=game_Deck.deal_card()
    playercard1=game_Deck.deal_card()
    playercard2=game_Deck.deal_card()
    dealer_hand.add_card(dealcard1)
    dealer_hand.add_card(dealcard2)
    player_hand.add_card(playercard1)
    player_hand.add_card(playercard2)
    print dealer_hand,player_hand
    in_play = True
    outcome = 'New deal ?'

def hit():
    global player_hand, dealer_hand,outcome ,in_play,score,out
    if in_play:
        if player_hand.get_value() < 21:
            playercard=game_Deck.deal_card()
            player_hand.add_card(playercard)
            outcome = 'Hit or stand ?' 
        if player_hand.get_value() > 21:
            outcome = "New deal ?"
            out= 'player is busted,dealer wins'# replace with your code below        
            in_play = False
            score-=1

    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global player_hand, dealer_hand,outcome,score,out,in_play
    if in_play:
        while dealer_hand.get_value() <17:
            dealercard=game_Deck.deal_card()
            dealer_hand.add_card(dealercard)
        if dealer_hand.get_value() >21:
            out = 'dealer is busted,player wins'
            in_play = False
            score+=1
        elif dealer_hand.get_value() <=21:
            if dealer_hand.get_value() >= player_hand.get_value():
                out = 'dealer wins'
                in_play = False
                score-=1
            elif dealer_hand.get_value() < player_hand.get_value():  
                out = 'player wins'
                in_play = False
                score+=1
    outcome = 'New deal ?'

    
        # replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below 
    canvas.draw_text('Blackjack',[200,50],50,'Blue')
    canvas.draw_text('Dealer',[70,100],30,'black')
    canvas.draw_text('Player',[70,350],30,'black')
    canvas.draw_text(outcome,[300,350],30,'black')
    canvas.draw_text(out,[200,100],30,'black')
    player_hand.draw(canvas,[70,400])
    if in_play == True:
        dealer_hand.draw(canvas,[70,150])
        canvas.draw_image(card_back,[CARD_BACK_CENTER[0]+72,CARD_BACK_CENTER[1]], CARD_BACK_SIZE, [pos[0] + CARD_BACK_CENTER[0], pos[1] + CARD_BACK_CENTER[1]], CARD_SIZE)
    elif in_play == False:
        dealer_hand.draw(canvas,[70,150])
    A="Score = " + str(score)    
    canvas.draw_text(A,[450,130],30,'black')
    
    
    
        # initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()
